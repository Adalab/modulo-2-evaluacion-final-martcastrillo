{"version":3,"sources":["00_main.js","00_renderCharacters.js","01_fetch.js","02_addFavorites.js","03_search.js","04_localStorage.js","05_resetBtn.js"],"names":[],"mappingspDA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["\"use strict\";\n\n// Variables qSelector\nconst characterList = document.querySelector('.js_character_list');\nconst favoriteList = document.querySelector('.js-favorite-list');\nconst searchBtn = document.querySelector('.js_btn');\nconst searchInput = document.querySelector('.js_search');\nconst searchStatus = document.querySelector('.js_status');\nconst form = document.querySelector('.js_form');\nconst resetBtn = document.querySelector('.js_reset_btn');\nconst searchMessage = document.querySelector('.js_search_message');\nconst xfavorite = document.querySelector('.js_x_favorite');\n//Variables\n\nlet allCharacters = [];\nlet favoritesCharacters = [];\n\n\nfunction handleClick(event) {\n  //evento para concretamente que el currentTarget sobre donde está el evento, \n  //en nuestro caso en cada tarjeta\n  event.currentTarget.classList.toggle('selected');\n  //busca en el array aquel objeto que tiene el mismo char_id  que el id parseado del current Target\n  const selectedCh = allCharacters.find((charac) => charac.char_id === parseInt(event.currentTarget.id));\n\n  //busqueda para saber la posicion en favoritos si la tarjeta está en favoritos\n  const characterInFavsIndex = favoritesCharacters.findIndex((charac) => charac.char_id === parseInt(event.currentTarget.id));\n  //si la busqueda es -1 es decir que no lo encuentra, entonces lo añade \n  if (characterInFavsIndex === -1) {\n    //rellena el array de favoritos con lo qhe ha encontrado\n    favoritesCharacters.push(selectedCh);\n  }\n  // si la busqueda da un index es que si lo encuentra y entonces, debe quitarlo\n  else {\n    favoritesCharacters.splice(characterInFavsIndex, 1);\n  }\n  localStorage.setItem('favoriteCharacter', JSON.stringify(favoritesCharacters));\n  renderfavoriteCh();\n\n}\n//Eventos\n\n\n/* searchInput.addEventListener('input', () => {\n  const userSearch = searchInput.value;\n  searchMessage.innerHTML = '';\n  if (userSearch === '') {\n    searchMessage.innerHTML = 'No ha especificado ningún parámetro de búsqueda';\n  }\n  else{\n    searchMessage.innerHTML = '';\n  }\n}) */\n\n\n//código que que ejecuta al inicio de carga de la pagina\n\n\n\n","function renderOneCharacter(character) {\n    let classSelected = '';\n   /*  let xFavorite = ''; */\n    //busqueda para saber la posicion en favoritos si la tarjeta está en favoritos\n    const characterInFavsIndex = favoritesCharacters.findIndex((charac) => charac.char_id === parseInt(character.char_id));\n    const characterInFavs = favoritesCharacters.find((charac) => charac.char_id === parseInt(character.char_id));\n   \n    //si la busqueda es -1 es decir que no lo encuentra, entonces lo añade \n    if (characterInFavsIndex === -1) {\n        classSelected = '';\n /*        xFavorite = ''; */\n    }\n    // si la busqueda da un index es que si lo encuentra y entonces, debe quitarlo\n    else {\n        classSelected = 'selected';\n  /*       xFavorite =  `<p class=\"xfavorite js_x_favorite\">X</p>`; */\n    }\n    // atributo gancho char_id para poder trabajar luego con el currentTarget \n    let html = `<li>\n      <article class=\"js_article ${classSelected} card\" id=\"${character.char_id}\"> \n\n      \n      <span class=\"photobox\">\n        <img class=\"card_img\"\n          src=\"${character.img}\"\n          alt=\"characterImage\">\n          </span>\n          <div class =\"text\">\n            <h3 class=\"card_name\">${character.name}</h3>\n            <h3 class=\"card_status\">${character.status}</h3>\n          </div>\n      </article>\n      </li>`;\n    return html;\n}\nfunction addCharacterListeners() {\n     //por ser un qSAll nos dá un array\n    const allCards = document.querySelectorAll('.js_article');\n    for (const eachCard of allCards) {\n        eachCard.addEventListener('click', handleClick);\n    }\n}\nfunction renderAllCharacters(characters) {\n    let html = '';\n    for (const eachCharacter of characters) {\n        html += renderOneCharacter(eachCharacter);\n    }\n    characterList.innerHTML = html;\n\n    addCharacterListeners();\n}\n\naddCharacterListeners();","fetch('https://breakingbadapi.com/api/characters')\n  .then((response) => response.json())\n  .then((data) => {\n    allCharacters = data;\n    renderAllCharacters(allCharacters);\n\n  });","\nfunction renderfavoriteCh() {\n    let html = '';\n    for (const eachCharacter of favoritesCharacters) {\n        html += renderOneCharacter(eachCharacter);\n    }\n    favoriteList.innerHTML = html;\n}","form.addEventListener('submit', (event) => {\n  event.preventDefault();\n})\nsearchBtn.addEventListener('click', () => {\n  const userSearch = searchInput.value.toLowerCase();\n  const searchStatusValue = searchStatus.value;\n\n  if (userSearch && (searchStatusValue !== 'All')) {\n\n    const superfilter = allCharacters.filter((eachCharacter) => eachCharacter.name.toLowerCase().includes(userSearch)).filter((eachCharacter) => eachCharacter.status.includes(searchStatusValue));\n    renderAllCharacters(superfilter);\n    console.log(superfilter);\n  }\n\n  else if (userSearch) {\n\n    //variable para meter los personajes que coincidan con la busqueda\n    const filteredCharacters = allCharacters.filter((eachCharacter) => eachCharacter.name.toLowerCase().includes(userSearch));\n\n    //pinta los personajes filtrados\n    renderAllCharacters(filteredCharacters);\n    searchMessage.innerHTML = '';\n  }\n  else if (searchStatusValue) {\n    const filteredStatus = allCharacters.filter((eachCharacter) => {\n      if (searchStatusValue === 'All') { //para forzale a darno contenido al render, de modo que siempre muestre todos\n        return true;\n      }\n      else {\n        return eachCharacter.status.includes(searchStatusValue);\n      }\n    });\n    console.log(filteredStatus);\n    renderAllCharacters(filteredStatus);\n    searchMessage.innerHTML = '';\n  }\n\n})\n","const savedFavorites = JSON.parse(localStorage.getItem('favoriteCharacter'));\n\n//despues de un get item hacemos un if para comprobar si hay o no algo en local storage\nif (savedFavorites !== null) {\n  favoritesCharacters = savedFavorites;\n  renderfavoriteCh();\n}\n","resetBtn.addEventListener(\"click\", (event) => {\n\tevent.preventDefault();\n  favoritesCharacters = [];\n  let html = '';\n  favoriteList.innerHTML = html;\n  localStorage.removeItem('favoriteCharacter');\n  renderAllCharacters(allCharacters);\n  searchInput.value = '';\n})\n/* xfavorite.addEventListener(\"click\", (event) => {\n  console.log(event.target);\n  favoritesCharacters.splice(xfavorite, 1);\n}) */"]}